name: Release

on:
  workflow_call:
    inputs:
      build-run-id:
        description: "The run ID of the build job"
        required: true
        type: string

permissions:
  contents: read # for checkout

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      no-changes: ${{ steps.check-changes.outputs.no-changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "yarn"

      - run: yarn install --immutable

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ inputs.build-run-id }}

      - run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Release
        run: yarn workspaces foreach -A --topological --no-private run ci:release

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --cached --quiet; then
            echo "no-changes=true" >> $GITHUB_OUTPUT
          else
            echo "no-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Tag
        if: steps.check-changes.outputs.no-changes != 'true'
        run: |
          git commit -m "chore: release"
          yarn workspaces foreach -A --no-private run ci:git-tag
          git push --follow-tags

  publish-github-release:
    needs: release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
      issues: write
      pull-requests: write
    # if: needs.release.outputs.no-changes != 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "yarn"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          run-id: ${{ inputs.build-run-id }}

      - run: yarn install --immutable

      - name: Release github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: yarn workspaces foreach -A --no-private run ci:release-github

  publish-npm:
    needs: release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      id-token: write # to enable use of OIDC for npm provenance
    # if: needs.release.outputs.no-changes != 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      - run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          registry-url: "https://registry.npmjs.org"
          scope: "@wroud"
          cache: "yarn"

      - name: Setup .yarnrc.yml
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          yarn config set npmAlwaysAuth true
          yarn config set npmPublishRegistry "https://registry.npmjs.org"
          yarn config set npmAuthToken $NPM_AUTH_TOKEN

      - run: yarn install --immutable

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          run-id: ${{ inputs.build-run-id }}

      - name: Publish to npm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: yarn workspaces foreach -A --topological --no-private npm publish --access public --tolerate-republish

      # - name: üî¥ Delete remote badges branch
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      #   run: git push origin --delete badges
      #   continue-on-error: true

      # - name: ‚ûï Create badges branch
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      #   run: git checkout -b badges
      #   continue-on-error: true

      # - name: ‚öôÔ∏è Generating coverage badges
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      #   uses: jpb06/coverage-badges-action@latest
      #   continue-on-error: true
      #   with:
      #     coverage-summary-path: |
      #       ./coverage/coverage-summary.json
      #     branches: "*"
      #     target-branch: badges

      # - name: ‚¨ÜÔ∏è Push badges branch
      #   run: git push origin badges
